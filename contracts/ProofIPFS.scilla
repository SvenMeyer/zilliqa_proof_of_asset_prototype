scilla_version 0

(* ProofIPFS Contract *)

import PairUtils ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library ProofIPFS

let one = Uint128 1
let zero = Uint128 0

(* error codes library *)
let code_success        = Uint32 0
let code_item_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_itemid_exist   = Uint32 4

let fst_f = @fst (ByStr20) (BNum)
let snd_f = @snd (ByStr20) (BNum)

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract ProofIPFS
(owner: ByStr20)

(* ipfsInventory will store a Map of Items                          *)
(*     String  ipfs_cid (index)                                     *)
(*     ByStr20 owner address                                        *)
(*     BNum    block_number of registraton                          *)

field ipfsInventory: Map String (Pair (ByStr20) (BNum))
                    = Emp String (Pair (ByStr20) (BNum))


(* ======== transitions ===============*)

(* @notice: Allows `_sender` to register ownership for a IPFS file            *)
(* @dev   : No ccess controls - anybody is allowed to register                *)
(* @param : ipfs_cid : IPFS CID (hash) of item (file)                         *)

transition setOwnership(ipfs_cid: String)

    items <- ipfsInventory;

    itemExist = builtin contains items ipfs_cid;
    match itemExist with
    | True =>
        e = {_eventname : "setOwnership"; code : code_itemid_exist};
        event e
    | False =>
        (* Creating a new Item Model *)
		(* A new item model is a Pair of owner address (_sender) and block_number *)
		block_number <- & BLOCKNUMBER;
        new_item = Pair {(ByStr20) (BNum)} _sender block_number;

        (* Add the new item to the item_inventory Map, with ipfs_cid as the key   *)
        ipfsInventory[ipfs_cid] := new_item;

        e = {_eventname : "setOwnership"; code : code_success};
        event e
    end
end


(* @notice: check if a IPFS CID/hash has been registered already              *)
(* @dev   : No ccess controls - anybody is allowed to get that information    *)
(* @param : ipfs_cid : IPFS CID (hash) of item (file)                         *)

transition checkRegistered(ipfs_cid: String)

    items_map <- ipfsInventory;

    itemExist = builtin contains items_map ipfs_cid;
    match itemExist with
    | True =>
        e = {_eventname : "checkRegistered"; code : code_success};
        event e
    | False =>
        e = {_eventname : "checkRegistered"; code : code_item_not_found};
        event e
    end
end


(* @notice: get registration info (owner, block_number) for a IPFS file       *)
(* @dev   : No ccess controls - anybody is allowed to get that information    *)
(* @param : ipfs_cid : IPFS CID (hash) of item (file)                         *)

transition getRegistration(ipfs_cid: String)

    items_map <- ipfsInventory;

    registration = builtin get items_map ipfs_cid;
    match registration with
    | Some v =>
        (* v contains (owner, block_number) (Pair (ByStr20) (BNum)) *)
        e = {_eventname: "getRegistration_success"; code: code_success; msg: v};
        event e

    | None =>
        e = {_eventname: "getRegistration_item_not_found"; code: code_item_not_found};
        event e

    end
end


(* @notice: Allows a `_sender` to remove a item from the ipfsInventory *)

transition deleteOwnership(ipfs_cid: String)

  value_pair <- ipfsInventory[ipfs_cid];
  match value_pair with
  | Some v =>
    reg_address  = fst_f v;
    is_owner = builtin eq reg_address _sender;
    match is_owner with
        | True =>
            delete ipfsInventory[ipfs_cid];
            e = {_eventname: "deleteOwnership"; code: code_success};
            event e
            
        | False =>
            e = {_eventname: "deleteOwnership"; code: code_not_authorized};
            event e
    end
  | None =>
    e = {_eventname: "deleteOwnership"; code: code_item_not_found};
    event e
  end

end
